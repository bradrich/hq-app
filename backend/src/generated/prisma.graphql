# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Answer implements Node {
  answerId: Int!
  answer: String
  correct: Boolean
  count: Int
  question(where: QuestionWhereInput): Question
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Game implements Node {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Question implements Node {
  questionId: Int!
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  game(where: GameWhereInput): Game
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User implements Node {
  email: String!
  password: String!
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}


#
# Other Types
#

type AggregateAnswer {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateUser {
  count: Int!
}

"""
A connection to a list of items.
"""
type AnswerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  answerId: Int!
  answer: String
  correct: Boolean
  count: Int
  question: QuestionCreateOneWithoutAnswersInput
}

input AnswerCreateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateWithoutQuestionInput {
  answerId: Int!
  answer: String
  correct: Boolean
  count: Int
}

"""
An edge in a connection.
"""
type AnswerEdge {
  """
  The item at the end of the edge.
  """
  node: Answer!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AnswerOrderByInput {
  answerId_ASC
  answerId_DESC
  answer_ASC
  answer_DESC
  correct_ASC
  correct_DESC
  count_ASC
  count_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnswerPreviousValues {
  answerId: Int!
  answer: String
  correct: Boolean
  count: Int
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AnswerSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  answerId: Int
  answer: String
  correct: Boolean
  count: Int
  question: QuestionUpdateOneWithoutAnswersInput
}

input AnswerUpdateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AnswerUpdateWithoutQuestionDataInput {
  answerId: Int
  answer: String
  correct: Boolean
  count: Int
}

input AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutQuestionDataInput!
}

input AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutQuestionDataInput!
  create: AnswerCreateWithoutQuestionInput!
}

input AnswerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AnswerWhereInput!]
  answerId: Int
  """
  All values that are not equal to given value.
  """
  answerId_not: Int
  """
  All values that are contained in given list.
  """
  answerId_in: [Int!]
  """
  All values that are not contained in given list.
  """
  answerId_not_in: [Int!]
  """
  All values less than the given value.
  """
  answerId_lt: Int
  """
  All values less than or equal the given value.
  """
  answerId_lte: Int
  """
  All values greater than the given value.
  """
  answerId_gt: Int
  """
  All values greater than or equal the given value.
  """
  answerId_gte: Int
  answer: String
  """
  All values that are not equal to given value.
  """
  answer_not: String
  """
  All values that are contained in given list.
  """
  answer_in: [String!]
  """
  All values that are not contained in given list.
  """
  answer_not_in: [String!]
  """
  All values less than the given value.
  """
  answer_lt: String
  """
  All values less than or equal the given value.
  """
  answer_lte: String
  """
  All values greater than the given value.
  """
  answer_gt: String
  """
  All values greater than or equal the given value.
  """
  answer_gte: String
  """
  All values containing the given string.
  """
  answer_contains: String
  """
  All values not containing the given string.
  """
  answer_not_contains: String
  """
  All values starting with the given string.
  """
  answer_starts_with: String
  """
  All values not starting with the given string.
  """
  answer_not_starts_with: String
  """
  All values ending with the given string.
  """
  answer_ends_with: String
  """
  All values not ending with the given string.
  """
  answer_not_ends_with: String
  correct: Boolean
  """
  All values that are not equal to given value.
  """
  correct_not: Boolean
  count: Int
  """
  All values that are not equal to given value.
  """
  count_not: Int
  """
  All values that are contained in given list.
  """
  count_in: [Int!]
  """
  All values that are not contained in given list.
  """
  count_not_in: [Int!]
  """
  All values less than the given value.
  """
  count_lt: Int
  """
  All values less than or equal the given value.
  """
  count_lte: Int
  """
  All values greater than the given value.
  """
  count_gt: Int
  """
  All values greater than or equal the given value.
  """
  count_gte: Int
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  question: QuestionWhereInput
}

input AnswerWhereUniqueInput {
  answerId: Int
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
A connection to a list of items.
"""
type GameConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
  questions: QuestionCreateManyWithoutGameInput
}

input GameCreateOneWithoutQuestionsInput {
  create: GameCreateWithoutQuestionsInput
  connect: GameWhereUniqueInput
}

input GameCreateWithoutQuestionsInput {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
}

"""
An edge in a connection.
"""
type GameEdge {
  """
  The item at the end of the edge.
  """
  node: Game!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum GameOrderByInput {
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  numWinners_ASC
  numWinners_DESC
  averagePrize_ASC
  averagePrize_DESC
  streamUrl_ASC
  streamUrl_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamePreviousValues {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GameSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GameSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
  questions: QuestionUpdateManyWithoutGameInput
}

input GameUpdateOneWithoutQuestionsInput {
  create: GameCreateWithoutQuestionsInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameUpdateWithoutQuestionsDataInput
  upsert: GameUpsertWithoutQuestionsInput
}

input GameUpdateWithoutQuestionsDataInput {
  startTime: DateTime
  endTime: DateTime
  numWinners: Int
  averagePrize: Float
  streamUrl: String
}

input GameUpsertWithoutQuestionsInput {
  update: GameUpdateWithoutQuestionsDataInput!
  create: GameCreateWithoutQuestionsInput!
}

input GameWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [GameWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [GameWhereInput!]
  startTime: DateTime
  """
  All values that are not equal to given value.
  """
  startTime_not: DateTime
  """
  All values that are contained in given list.
  """
  startTime_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  startTime_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  startTime_lt: DateTime
  """
  All values less than or equal the given value.
  """
  startTime_lte: DateTime
  """
  All values greater than the given value.
  """
  startTime_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  startTime_gte: DateTime
  endTime: DateTime
  """
  All values that are not equal to given value.
  """
  endTime_not: DateTime
  """
  All values that are contained in given list.
  """
  endTime_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  endTime_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  endTime_lt: DateTime
  """
  All values less than or equal the given value.
  """
  endTime_lte: DateTime
  """
  All values greater than the given value.
  """
  endTime_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  endTime_gte: DateTime
  numWinners: Int
  """
  All values that are not equal to given value.
  """
  numWinners_not: Int
  """
  All values that are contained in given list.
  """
  numWinners_in: [Int!]
  """
  All values that are not contained in given list.
  """
  numWinners_not_in: [Int!]
  """
  All values less than the given value.
  """
  numWinners_lt: Int
  """
  All values less than or equal the given value.
  """
  numWinners_lte: Int
  """
  All values greater than the given value.
  """
  numWinners_gt: Int
  """
  All values greater than or equal the given value.
  """
  numWinners_gte: Int
  averagePrize: Float
  """
  All values that are not equal to given value.
  """
  averagePrize_not: Float
  """
  All values that are contained in given list.
  """
  averagePrize_in: [Float!]
  """
  All values that are not contained in given list.
  """
  averagePrize_not_in: [Float!]
  """
  All values less than the given value.
  """
  averagePrize_lt: Float
  """
  All values less than or equal the given value.
  """
  averagePrize_lte: Float
  """
  All values greater than the given value.
  """
  averagePrize_gt: Float
  """
  All values greater than or equal the given value.
  """
  averagePrize_gte: Float
  streamUrl: String
  """
  All values that are not equal to given value.
  """
  streamUrl_not: String
  """
  All values that are contained in given list.
  """
  streamUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  streamUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  streamUrl_lt: String
  """
  All values less than or equal the given value.
  """
  streamUrl_lte: String
  """
  All values greater than the given value.
  """
  streamUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  streamUrl_gte: String
  """
  All values containing the given string.
  """
  streamUrl_contains: String
  """
  All values not containing the given string.
  """
  streamUrl_not_contains: String
  """
  All values starting with the given string.
  """
  streamUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  streamUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  streamUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  streamUrl_not_ends_with: String
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGame(data: GameCreateInput!): Game!
  createQuestion(data: QuestionCreateInput!): Question!
  createAnswer(data: AnswerCreateInput!): Answer!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyGames(data: GameUpdateInput!, where: GameWhereInput!): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput!): BatchPayload!
  updateManyAnswers(data: AnswerUpdateInput!, where: AnswerWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyGames(where: GameWhereInput!): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput!): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  user(where: UserWhereUniqueInput!): User
  game(where: GameWhereUniqueInput!): Game
  question(where: QuestionWhereUniqueInput!): Question
  answer(where: AnswerWhereUniqueInput!): Answer
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type QuestionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  questionId: Int!
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  game: GameCreateOneWithoutQuestionsInput
  answers: AnswerCreateManyWithoutQuestionInput
}

input QuestionCreateManyWithoutGameInput {
  create: [QuestionCreateWithoutGameInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAnswersInput {
  questionId: Int!
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  game: GameCreateOneWithoutQuestionsInput
}

input QuestionCreateWithoutGameInput {
  questionId: Int!
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  answers: AnswerCreateManyWithoutQuestionInput
}

"""
An edge in a connection.
"""
type QuestionEdge {
  """
  The item at the end of the edge.
  """
  node: Question!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum QuestionOrderByInput {
  questionId_ASC
  questionId_DESC
  question_ASC
  question_DESC
  category_ASC
  category_DESC
  questionNumber_ASC
  questionNumber_DESC
  questionCount_ASC
  questionCount_DESC
  askTime_ASC
  askTime_DESC
  endTime_ASC
  endTime_DESC
  advancingPlayersCount_ASC
  advancingPlayersCount_DESC
  eliminatedPlayersCount_ASC
  eliminatedPlayersCount_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionPreviousValues {
  questionId: Int!
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [QuestionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateInput {
  questionId: Int
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  game: GameUpdateOneWithoutQuestionsInput
  answers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateManyWithoutGameInput {
  create: [QuestionCreateWithoutGameInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutGameInput!]
}

input QuestionUpdateOneWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutAnswersDataInput
  upsert: QuestionUpsertWithoutAnswersInput
}

input QuestionUpdateWithoutAnswersDataInput {
  questionId: Int
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  game: GameUpdateOneWithoutQuestionsInput
}

input QuestionUpdateWithoutGameDataInput {
  questionId: Int
  question: String
  category: String
  questionNumber: Int
  questionCount: Int
  askTime: DateTime
  endTime: DateTime
  advancingPlayersCount: Int
  eliminatedPlayersCount: Int
  answers: AnswerUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutGameDataInput!
}

input QuestionUpsertWithoutAnswersInput {
  update: QuestionUpdateWithoutAnswersDataInput!
  create: QuestionCreateWithoutAnswersInput!
}

input QuestionUpsertWithWhereUniqueWithoutGameInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutGameDataInput!
  create: QuestionCreateWithoutGameInput!
}

input QuestionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [QuestionWhereInput!]
  questionId: Int
  """
  All values that are not equal to given value.
  """
  questionId_not: Int
  """
  All values that are contained in given list.
  """
  questionId_in: [Int!]
  """
  All values that are not contained in given list.
  """
  questionId_not_in: [Int!]
  """
  All values less than the given value.
  """
  questionId_lt: Int
  """
  All values less than or equal the given value.
  """
  questionId_lte: Int
  """
  All values greater than the given value.
  """
  questionId_gt: Int
  """
  All values greater than or equal the given value.
  """
  questionId_gte: Int
  question: String
  """
  All values that are not equal to given value.
  """
  question_not: String
  """
  All values that are contained in given list.
  """
  question_in: [String!]
  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]
  """
  All values less than the given value.
  """
  question_lt: String
  """
  All values less than or equal the given value.
  """
  question_lte: String
  """
  All values greater than the given value.
  """
  question_gt: String
  """
  All values greater than or equal the given value.
  """
  question_gte: String
  """
  All values containing the given string.
  """
  question_contains: String
  """
  All values not containing the given string.
  """
  question_not_contains: String
  """
  All values starting with the given string.
  """
  question_starts_with: String
  """
  All values not starting with the given string.
  """
  question_not_starts_with: String
  """
  All values ending with the given string.
  """
  question_ends_with: String
  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
  category: String
  """
  All values that are not equal to given value.
  """
  category_not: String
  """
  All values that are contained in given list.
  """
  category_in: [String!]
  """
  All values that are not contained in given list.
  """
  category_not_in: [String!]
  """
  All values less than the given value.
  """
  category_lt: String
  """
  All values less than or equal the given value.
  """
  category_lte: String
  """
  All values greater than the given value.
  """
  category_gt: String
  """
  All values greater than or equal the given value.
  """
  category_gte: String
  """
  All values containing the given string.
  """
  category_contains: String
  """
  All values not containing the given string.
  """
  category_not_contains: String
  """
  All values starting with the given string.
  """
  category_starts_with: String
  """
  All values not starting with the given string.
  """
  category_not_starts_with: String
  """
  All values ending with the given string.
  """
  category_ends_with: String
  """
  All values not ending with the given string.
  """
  category_not_ends_with: String
  questionNumber: Int
  """
  All values that are not equal to given value.
  """
  questionNumber_not: Int
  """
  All values that are contained in given list.
  """
  questionNumber_in: [Int!]
  """
  All values that are not contained in given list.
  """
  questionNumber_not_in: [Int!]
  """
  All values less than the given value.
  """
  questionNumber_lt: Int
  """
  All values less than or equal the given value.
  """
  questionNumber_lte: Int
  """
  All values greater than the given value.
  """
  questionNumber_gt: Int
  """
  All values greater than or equal the given value.
  """
  questionNumber_gte: Int
  questionCount: Int
  """
  All values that are not equal to given value.
  """
  questionCount_not: Int
  """
  All values that are contained in given list.
  """
  questionCount_in: [Int!]
  """
  All values that are not contained in given list.
  """
  questionCount_not_in: [Int!]
  """
  All values less than the given value.
  """
  questionCount_lt: Int
  """
  All values less than or equal the given value.
  """
  questionCount_lte: Int
  """
  All values greater than the given value.
  """
  questionCount_gt: Int
  """
  All values greater than or equal the given value.
  """
  questionCount_gte: Int
  askTime: DateTime
  """
  All values that are not equal to given value.
  """
  askTime_not: DateTime
  """
  All values that are contained in given list.
  """
  askTime_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  askTime_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  askTime_lt: DateTime
  """
  All values less than or equal the given value.
  """
  askTime_lte: DateTime
  """
  All values greater than the given value.
  """
  askTime_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  askTime_gte: DateTime
  endTime: DateTime
  """
  All values that are not equal to given value.
  """
  endTime_not: DateTime
  """
  All values that are contained in given list.
  """
  endTime_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  endTime_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  endTime_lt: DateTime
  """
  All values less than or equal the given value.
  """
  endTime_lte: DateTime
  """
  All values greater than the given value.
  """
  endTime_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  endTime_gte: DateTime
  advancingPlayersCount: Int
  """
  All values that are not equal to given value.
  """
  advancingPlayersCount_not: Int
  """
  All values that are contained in given list.
  """
  advancingPlayersCount_in: [Int!]
  """
  All values that are not contained in given list.
  """
  advancingPlayersCount_not_in: [Int!]
  """
  All values less than the given value.
  """
  advancingPlayersCount_lt: Int
  """
  All values less than or equal the given value.
  """
  advancingPlayersCount_lte: Int
  """
  All values greater than the given value.
  """
  advancingPlayersCount_gt: Int
  """
  All values greater than or equal the given value.
  """
  advancingPlayersCount_gte: Int
  eliminatedPlayersCount: Int
  """
  All values that are not equal to given value.
  """
  eliminatedPlayersCount_not: Int
  """
  All values that are contained in given list.
  """
  eliminatedPlayersCount_in: [Int!]
  """
  All values that are not contained in given list.
  """
  eliminatedPlayersCount_not_in: [Int!]
  """
  All values less than the given value.
  """
  eliminatedPlayersCount_lt: Int
  """
  All values less than or equal the given value.
  """
  eliminatedPlayersCount_lte: Int
  """
  All values greater than the given value.
  """
  eliminatedPlayersCount_gt: Int
  """
  All values greater than or equal the given value.
  """
  eliminatedPlayersCount_gte: Int
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  game: GameWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
}

input QuestionWhereUniqueInput {
  questionId: Int
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  email: String!
  password: String!
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
